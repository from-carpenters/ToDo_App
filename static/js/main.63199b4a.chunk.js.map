{"version":3,"sources":["reportWebVitals.js","todoitem.js","todosData.js","App.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ToDoItem","props","className","type","checked","item","completed","onChange","handleChange","id","style","fontStyle","fontSize","color","textDecoration","text","todosData","App","state","todos","bind","this","setState","prevState","map","todo","todoItems","React","Component","ReactDOM","render","document","getElementById"],"mappings":"oKAYeA,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,mCC6BCQ,MAlCf,SAAkBC,GAgBd,OAEI,sBAAKC,UAAU,YAAf,UAEA,uBAAOA,UAAU,QAAQC,KAAK,WAC9BC,QAASH,EAAMI,KAAKC,UACpBC,SAAU,kBAAMN,EAAMO,aAAaP,EAAMI,KAAKI,OAE9C,mBAAIC,MAAOT,EAAMI,KAAKC,UAtBJ,CAClBK,UAAW,SACXC,SAAU,OACVC,MAAO,QACPC,eAAgB,gBAGI,CACpBH,UAAW,SACXC,SAAU,OACVC,MAAO,OAYP,SACKZ,EAAMI,KAAKI,GAAK,IAAKR,EAAMI,KAAKU,WCK9BC,EAhCG,CACd,CACIP,GAAI,KACJM,KAAM,qBACNT,WAAW,GAGf,CACIG,GAAI,KACJM,KAAM,mBACNT,WAAW,GAGf,CACIG,GAAI,KACJM,KAAM,mBACNT,WAAW,GAGf,CACIG,GAAI,KACJM,KAAM,WACNT,WAAW,GAGf,CACIG,GAAI,KACJM,KAAM,mCACNT,WAAW,ICyBJW,G,wDA9Cb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXC,MAAOH,GAIT,EAAKR,aAAe,EAAKA,aAAaY,KAAlB,gBAPR,E,yDAWDX,GACXY,KAAKC,UAAS,SAACC,GAOb,MAAO,CACHJ,MAPiBI,EAAUJ,MAAMK,KAAI,SAAAC,GAIvC,OAHIA,EAAKhB,KAAOA,IACdgB,EAAKnB,WAAamB,EAAKnB,WAElBmB,W,+BAaH,IAAD,OAEDC,EAAYL,KAAKH,MAAMC,MAAMK,KAAI,SAAAnB,GAAI,OAAI,cAAC,EAAD,CAAwBA,KAAMA,EAAMG,aAAc,EAAKA,cAAxCH,EAAKI,OAEnE,OACM,qBAAKP,UAAU,YAAf,SAEGwB,Q,GAtCKC,IAAMC,YCAxBC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SAKjDzC,M","file":"static/js/main.63199b4a.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\n\nfunction ToDoItem(props) {\n    \n    const completeStyle = {\n        fontStyle: \"italic\",\n        fontSize: \"16px\",\n        color: \"green\",\n        textDecoration: \"line-through\"\n    }\n\n    const incompleteStyle = {\n        fontStyle: \"italic\",\n        fontSize: \"20px\",\n        color: \"red\",\n        \n    }\n\n    return (\n\n        <div className=\"todo-item\">\n\n        <input className=\"hover\" type=\"checkbox\" \n        checked={props.item.completed}\n        onChange={() => props.handleChange(props.item.id)}\n        /> \n        <p  style={props.item.completed ? completeStyle : incompleteStyle}>\n            {props.item.id + \" \"+ props.item.text}\n            \n        </p>\n        \n        </div>\n    )\n}\n\n \nexport default ToDoItem;","const todosData = [\n    {\n        id: \"1.\",\n        text: \"Take out the trash\",\n        completed: true\n    },\n\n    {\n        id: \"2.\",\n        text: \"Grocery shopping\",\n        completed: false\n    },\n\n    {\n        id: \"3.\",\n        text: \"Clean gecko tank\",\n        completed: false\n    },\n\n    {\n        id: \"4.\",\n        text: \"Mow lawn\",\n        completed: true\n    },\n\n    {\n        id: \"5.\",\n        text: \"Catch up on arrested development\",\n        completed: true\n    }\n]\n\nexport default todosData;","import React from 'react';\nimport ToDoItem from './todoitem';\nimport todosData from \"./todosData\";\nimport './style.css';\n\n\nclass App extends React.Component {\n  constructor() {\n    super() \n    this.state = {\n      todos: todosData\n\n    }\n\n    this.handleChange = this.handleChange.bind(this)\n    \n  }\n\n  handleChange(id) {\n    this.setState((prevState) => {\n      const updatedToDos = prevState.todos.map(todo => {\n        if (todo.id === id) {\n          todo.completed = !todo.completed\n        }\n        return todo\n      })\n      return {\n          todos: updatedToDos\n      }\n    })\n    \n    \n  }\n\n \n\n\n  render() {\n\n    const todoItems = this.state.todos.map(item => <ToDoItem key={item.id} item={item} handleChange={this.handleChange}/>)\n\n    return (\n          <div className=\"todo-list\">\n        \n            {todoItems}\n\n          </div>\n\n    )\n  }\n}\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\nimport App from './App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}